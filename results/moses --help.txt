Allowed options:
  -h [ --help ]                         Produce help message.
                                        
  --version                             Display the version of moses.
                                        
  -j [ --jobs ] arg                     Number of jobs allocated for deme 
                                        optimization. Jobs can be executed on a
                                        remote machine as well, in such case 
                                        the notation -j N:REMOTE_HOST is used, 
                                        where N is the number of jobs on the 
                                        machine REMOTE_HOST. For instance one 
                                        can enter the options -j4 
                                        -j16:my_server.org (or 
                                        -j16:user@my_server.org if one wishes 
                                        to run the remote jobs under a 
                                        different user name), meaning that 4 
                                        jobs are allocated on the local machine
                                        and 16 jobs are allocated on 
                                        my_server.org. The assumption is that 
                                        moses must be on the remote machine and
                                        is located in a directory included in 
                                        the PATH environment variable. Beware 
                                        that a lot of log files are gonna be 
                                        generated when using this option on the
                                        remote machines.
                                        
  --min-pool arg (=50)                  Minimum number of elements to process 
                                        in the pool to enable  multi-threading.
                                        
  -e [ --exemplar ] arg                 Start the search with a given exemplar,
                                        can be used several times.
                                        
  -H [ --problem ] arg (=it)            Problem to solve, supported problems 
                                        are:
                                        
                                        it, regression based on input table
                                        
                                        pre, regression based on input table, 
                                        maximizing precision, while holding 
                                        activation fixed
                                        
                                        prerec, regression based on input 
                                        table, maximizing precision, while 
                                        holding recall fixed
                                        
                                        recall, regression based on input 
                                        table, maximizing recall while holding 
                                        precision fixed
                                        
                                        bep, regression based on input table, 
                                        maximizing break-even point (BEP) 
                                        between precision and recall
                                        
                                        f_one, regression based on input table,
                                        maximizing the F_1 score (harmonic mean
                                        of precision and recall)
                                        
                                        ip, search interesting patterns, where 
                                        interestingness is defined in terms of 
                                        several features such as maximizing the
                                        Kullback-Leibler divergence between the
                                        distribution of the outputs and that 
                                        same distribution in the context of the
                                        pattern being true. Or the difference 
                                        of skewnesses between the 2 
                                        distributions and other things being 
                                        experimented.
                                        
                                        ann-it, regression based on input table
                                        using ann
                                        
                                        cp, demo, regression based on combo 
                                        program
                                        
                                        pa, demo, even parity problem
                                        
                                        dj, demo, disjunction problem
                                        
                                        mux, demo, multiplex problem
                                        
                                        maj, demo, majority problem
                                        
                                        sr, demo, regression of f_n(x) = 
                                        sum_{k=1,n} x^k
                                        
  -i [ --input-file ] arg               Input table file in DSV format (with 
                                        comma, whitespace and tabulation as 
                                        seperator). Colums correspond to 
                                        features and rows to observations. Can 
                                        be used several times, in such a case 
                                        the behavioral score of the whole 
                                        problem is the concatenation of the 
                                        behavioral scores of the sub-problems 
                                        associated with the files. Each file 
                                        must have the same number of features 
                                        in the same order.
                                        
  -u [ --target-feature ] arg           Label of the target feature to fit. If 
                                        none is given the first one is used.
                                        
  -Y [ --ignore-feature ] arg           Ignore feature from the datasets. Can 
                                        be used several times to ignore several
                                        features.
                                        
  -b [ --nsamples ] arg (=-1)           Number of samples to describe the 
                                        problem. If nsample is negative, null 
                                        or larger than the maximum number of 
                                        samples allowed it is ignored. If the 
                                        default problem size is larger than the
                                        value provided with that option then 
                                        the dataset is subsampled randomly to 
                                        reach the target size.
                                        
  -Z [ --hc-crossover ] arg (=1)        Hillclimbing parameter (hc). If false, 
                                        then only the local neighborhood of the
                                        current center instance is explored. 
                                        That is, the highest-scoring instance 
                                        is chosen as the new center instance, 
                                        and the process is repeated.  For many 
                                        datasets, however, the highest-scoring 
                                        instances tend to cluster together, and
                                        so an exhaustive search may not be 
                                        required. When this option is 
                                        specified, a handful of the 
                                        highest-scoring instances are 
                                        crossed-over (in the genetic sense of 
                                        cross-over) to create new instances.  
                                        Only these are evaluated for fitness; 
                                        the exhaustive search step is skipped. 
                                        For many problem types, especialy those
                                        with large neighborhoods (i.e. those 
                                        with high prorgram complexity), this 
                                        can lead to an order-of-magnitude 
                                        speedup, or more.  For other problem 
                                        types, especially those with deceptive 
                                        scoring functions, this can hurt 
                                        performance.
                                        
  --hc-crossover-pop-size arg (=120)    Number of new candidates created by 
                                        crossover during each iteration of 
                                        hillclimbing. It also allows to control
                                        when crossover occurs over exhaustive 
                                        search. Specifically if the number of 
                                        candidate to explore by exhaustive 
                                        search is more than 10/3 * 
                                        crossover_pop_size, then crossover 
                                        kicks in.
                                        
  --hc-allow-resize-deme arg (=1)       Hillclimbing parameter (hc). If true 
                                        then the deme is allowed to resized to 
                                        fit in memory. Not that as it uses the 
                                        RAM of the machine therefore it 
                                        possibly introduces an indeterminism 
                                        between instances run on machines with 
                                        different RAM.
                                        
  -a [ --opt-algo ] arg (=hc)           Optimization algorithm, supported 
                                        algorithms are univariate (un), 
                                        simulation annealing (sa), hillclimbing
                                        (hc).
                                        
  -A [ --max-score ] arg (=3.40282347e+38)
                                        The max score to reach, once reached 
                                        MOSES halts. If the largest floating 
                                        point number is used and MOSES is able 
                                        to calculate the max score that can be 
                                        reached for that particular problem, it
                                        will overwrite it. Otherwise, for any 
                                        other value, the user's defined 
                                        max-score will be used.
                                        
  -m [ --max-evals ] arg (=10000)       Maximum number of fitness function 
                                        evaluations.
                                        
  --max-time arg (=2147483647)          Longest allowed runtime, in seconds.
                                        
  -s [ --cache-size ] arg (=100000)     Cache size. Memoize, that is, cache 
                                        evaluation results, so that identical 
                                        candidates are not re-evaluated.
                                        
  -n [ --ignore-operator ] arg          Ignore the following operator in the 
                                        program solution.  This option may be 
                                        used several times.  Currently, only 
                                        div, sin, exp, log can be ignored. This
                                        option has the priority over 
                                        --include-only-operator. That is, if an
                                        operator is both be included and 
                                        ignored, then it is ignored.  This 
                                        option does not work with ANN.
                                        
  --linear-regression arg (=0)          When attempting to fit continous-valued
                                        features, restrict searches to linear 
                                        expressions only; that is, do not use 
                                        polynomials in the fit.  Specifying 
                                        this option also automatically disables
                                        the use of div, sin, exp and log.
                                        
  --logical-perm-ratio arg (=0)         When decorating boolean exemplars with 
                                        knobs, this option controls how many 
                                        pairs of literals of the form op(L1 L2)
                                        are created.  That is, such pairs are 
                                        used to decorate the exemplar tree. By 
                                        default, N such pairs are created, 
                                        where N is the arity of the problem. 
                                        Valid values for this option are in the
                                        range of -1.0 to +1.0.  For negative 
                                        values, the number of pairs created are
                                        (1.0+r)*N where r is the value given in
                                        this option.  For positive values, the 
                                        number of pairs created is (N + 
                                        r*N*(N-2)). A larger number of pairs 
                                        can lead to faster solutions but can 
                                        also result in over-training.
                                        
  -r [ --random-seed ] arg (=1)         Random seed.
                                        
  -v [ --complexity-temperature ] arg (=6)
                                        Set the "temperature" (scritly positive
                                        floating number) of the Boltzmann-like 
                                        distribution used to select the next 
                                        exemplar out of the metapopulaton. A 
                                        temperature that is too high or too low
                                        will make it likely that poor exemplars
                                        will be chosen for exploration, thus 
                                        resulting in excessively long search 
                                        times.
                                        
  -z [ --complexity-ratio ] arg (=3.5)  Fix the ratio of the score to 
                                        complexity, to be used as a penalty, 
                                        when ranking the metapopulation for 
                                        fitness.  The complexity penalty is the
                                        inverse of the complexity ratio.  
                                        Setting this ratio too low (complexity 
                                        penalty too high) causes the complexity
                                        to dominate ranking, probably trapping 
                                        the algorithm in a local maximum.  
                                        Setting this ratio too high (complexity
                                        penalty too low) will waste time 
                                        exploring unproductive solutions, 
                                        adversely lengthening solution times.  
                                        Suggest setting this to a value that is
                                        1x to 2x larger than the ratio of 
                                        change in complexity to score 
                                        improvement (as determined by earlier 
                                        runs).
                                        
  --cap-coef arg (=50)                  Set the leading coefficient of the 
                                        formula defining the metapop size cap =
                                        cap_coef*(x+250)*(1+2*exp(-x/500)), 
                                        where x is the number of generations so
                                        far. The default usually works well but
                                        if you run out of memory you may 
                                        decrease that value.
                                        
  --hc-max-nn-evals arg (=20000)        Hillclimbing parameter (hc).  When 
                                        exploring the nearest neighborhood of 
                                        an instance, this number specifies the 
                                        maximum number of nearest neighbors to 
                                        explore.  An exhaustive search of the 
                                        nearest neighborhood is performed when 
                                        the number of nearest neighbors is less
                                        than this value.  Problems with a large
                                        number of features (100 and above) 
                                        often evolve exemplars with a 
                                        complexity of 100 or more, which in 
                                        turn may have instances with hundreds 
                                        of thousands of nearest neighbors.  
                                        Exploring one nearest neighbor requires
                                        one evaluation of the scoring function,
                                        and so an exhaustive search can be 
                                        prohibitive.  A partial search can 
                                        often work quite well, especially when 
                                        cross-over is enabled.
                                        
  --hc-fraction-of-nn arg (=2)          Hillclimbing parameter (hc).  When 
                                        exploring the nearest neighborhood of 
                                        an instance, this number specifies the 
                                        fraction of nearest neighborhood to 
                                        explore.  As currently implemented, 
                                        only an estimate of the 
                                        nearest-neighborhood size is used, not 
                                        the true size.  However, this estimate 
                                        is accurate to within a factor of 2.  
                                        Thus, to obtain an exhaustive search of
                                        the entire neighborhood, set this to 
                                        2.0 or larger.  Problems with a large 
                                        number of features (100 and above) 
                                        often evolve exemplars with a 
                                        complexity of 100 or more, which in 
                                        turn may have instances with hundreds 
                                        of thousands of nearest neighbors.  
                                        Exploring one nearest neighbor requires
                                        one evaluation of the scoring function,
                                        and so an exhaustive search can be 
                                        prohibitive.  A partial search can 
                                        often work quite well, especially when 
                                        cross-over is enabled.
                                        
  -B [ --reduct-knob-building-effort ] arg (=2)
                                        Effort allocated for reduction during 
                                        knob building, 0-3, 0 means minimum 
                                        effort, 3 means maximum effort. The 
                                        bigger the effort the lower the 
                                        dimension of the deme.
                                        
  -D [ --max-dist ] arg (=4)            The maximum radius of the neighborhood 
                                        around the exemplar to explore.
                                        
  -d [ --reduce-all ] arg (=1)          Reduce all candidates before being 
                                        evaluated.  Otherwise they are only 
                                        reduced before being added to the 
                                        metapopulation. This option can be 
                                        valuable if memoization is enabled to 
                                        avoid re-evaluate of duplicates.
                                        
  -E [ --reduct-candidate-effort ] arg (=2)
                                        Effort allocated for reduction of 
                                        candidates, in the range 0-3. 0 means 
                                        minimum effort, 3 means maximum effort.
                                        
  -g [ --max-gens ] arg (=-1)           Maximum number of demes to generate and
                                        optimize, negative means no generation 
                                        limit.
                                        
  -I [ --include-dominated ] arg (=1)   Include dominated candidates (according
                                        behavioral score) when merging 
                                        candidates in the metapopulation. 
                                        Disabling this may lead to poorer 
                                        performance.
                                        
  -L [ --hc-single-step ] arg (=0)      Hillclimbing parameter (hc). If false, 
                                        then the normal hillclimbing algorithm 
                                        is used.  If true, then only one step 
                                        is taken towards the hilltop, and the 
                                        results are promptly folded back into 
                                        the metapopulation. If this flag is 
                                        set, then consider using the 
                                        widen-search flag as well, so as to 
                                        make forward progress.
                                        
  -N [ --include-only-operator ] arg    Include this operator, but exclude 
                                        others, in the solution.  This option 
                                        may be used several times to specify 
                                        multiple operators.  Currently, only 
                                        these operators are supported: plus, 
                                        times, div, sin, exp, log. This option 
                                        does not work with ANN.
                                        
  -P [ --pop-size-ratio ] arg (=20)     The higher the more effort is spent on 
                                        a deme.
                                        
  -p [ --noise ] arg (=-1)              Alternative way to set the ratio of raw
                                        score to complexity.  Setting this 
                                        option over-rides the complexity ratio,
                                        above.  Assumes that the data is noisy.
                                           The noisier the data, the stronger 
                                        the model complexity penalty.  If the 
                                        target feature is discrete, the setting
                                        should correspond to the fraction of 
                                        the input data that might be wrong 
                                        (i.e. the probability p that an output 
                                        datum (row) is wrong).   In this case, 
                                        only values 0 <= p < 0.5 are meaningful
                                        (i.e. less than half the data can be 
                                        wrong). Suggested values are in the 
                                        range 0.01 to 0.001.  If the target 
                                        feature is continuous, the value 
                                        specified should correspond to the 
                                        standard deviation of the (Gaussian) 
                                        noise centered around each candidate's 
                                        output. A negative value cedes this 
                                        setting to complexity-ratio flag, 
                                        above.
                                        
  -T [ --hc-widen-search ] arg (=0)     Hillclimbing parameter (hc). If false, 
                                        then deme search terminates when a 
                                        local hilltop is found. If true, then 
                                        the search radius is progressively 
                                        widened, until another termination 
                                        condition is met.
                                        
  --well-enough arg (=0)                If 1, use the "leave well-enough alone"
                                        algorithm for classification problems. 
                                        This algorithm, after finding a clause 
                                        that has perfect accuracy, will stop 
                                        mutating that clause any further. In 
                                        principle, this should speed 
                                        convergence.  In practice, not so much;
                                        it can hurt performance.
                                        
  --revisit arg (=0)                    Number of times the same exemplar can 
                                        be revisited. This option is only 
                                        worthwhile when there is a great deal 
                                        of stochasticity in the search so that 
                                        exploring a deme multiple times will 
                                        yield substantially different results. 
                                        This might be the case is feature 
                                        selection is used for instance.
                                        
  -c [ --result-count ] arg (=10)       The number of results to return, 
                                        ordered according to a linear 
                                        combination of score and complexity. If
                                        negative, then return all results.
                                        
  -S [ --output-score ] arg (=1)        If 1, output the score before each 
                                        candidate (at the left of the 
                                        complexity).
                                        
  -x [ --output-penalty ] arg (=0)      If 1, output the penalized score and 
                                        it's compenents (below each candidate).
                                        
  -t [ --output-bscore ] arg (=0)       If 1, output the bscore (below each 
                                        candidate).
                                        
  -C [ --output-only-best ] arg (=0)    If 1, print only the best candidates.
                                        
  -V [ --output-eval-number ] arg (=0)  If 1, output the actual number of 
                                        evaluations.
                                        
  -W [ --output-with-labels ] arg (=0)  If 1, output the candidates with using 
                                        the argument labels instead of argument
                                        numbers. For instance *("$price" 
                                        "$temprature") instead of *($1 $2). 
                                        This only works for data fitting 
                                        problems where the data file contains 
                                        labels in its header.
                                        
  --python arg (=0)                     If 1, output the program(s) as python 
                                        code instead of combo. Best with -c1 
                                        option to return a single python 
                                        module. Only implemented for boolean 
                                        programs currently.
                                        
  -o [ --output-file ] arg              File where to place the output. If 
                                        empty, then output to stdout.
                                        
  -y [ --combo-program ] arg            Combo program to learn, used when the 
                                        problem cp is selected (option -H).
                                        
  -k [ --problem-size ] arg (=5)        For even parity (pa), disjunction (dj) 
                                        and majority (maj) the problem size 
                                        corresponds directly to the arity. For 
                                        multiplex (mux) the arity is arg+2^arg.
                                        For regression of f(x)_o = 
                                        sum_{i={1,o}} x^i (sr) the problem size
                                        corresponds to the order o.
                                        
  -q [ --min-rand-input ] arg (=0)      Minimum value of a sampled coninuous 
                                        input.  The cp, ip, pre, recall, 
                                        prerec, bep and f_one problems all 
                                        require a range of values to be sampled
                                        in order to measure the fitness of a 
                                        proposed solution. This option sets the
                                        low end of the sampled range. In the 
                                        case of fitness function pre, the range
                                        corresponds to the activation of the 
                                        precision.
                                        
  -w [ --max-rand-input ] arg (=1)      Maximum value of a sampled coninuous 
                                        input.  The cp, ip, pre, recall, 
                                        prerec, bep and f_one problems all 
                                        require a range of values to be sampled
                                        in order to measure the fitness of a 
                                        proposed solution. This option sets the
                                        low high of the sampled range. In the 
                                        case of fitness function pre, the range
                                        corresponds to the activation of the 
                                        precision.
                                        
  -l [ --log-level ] arg (=INFO)        Log level, possible levels are NONE, 
                                        ERROR, WARN, INFO, DEBUG, FINE. Case 
                                        does not matter.
                                        
  -F [ --log-file-dep-opt ]             The name of the log is determined by 
                                        the options, for instance if moses-exec
                                        is called with -r 123 -H pa the log 
                                        name is moses_random-seed_123_problem_p
                                        a.log. The name will be truncated in 
                                        order not to be longer than 255 
                                        characters.
                                        
  -f [ --log-file ] arg (=moses.log)    File name where to write the log. This 
                                        option is overwritten by 
                                        log-file-dep-opt.
                                        
  -M [ --max-candidates ] arg (=-1)     Maximum number of considered candidates
                                        to be added to the metapopulation after
                                        optimizing deme.
                                        
  --mpi arg (=0)                        Enable MPI-based distributed 
                                        processing.
                                        
  -G [ --weighted-accuracy ] arg (=0)   This option is useful in case of 
                                        unbalanced data as it weights the score
                                        so that each class weights equally 
                                        regardless of their proportion in terms
                                        of sample size.
                                        
  --diversity-pressure arg (=0)         Set a diversity pressure on the 
                                        metapopulation. Programs behaving 
                                        similarily to others are more 
                                        penalized. That value sets the 
                                        importance of that penalty (from 0 to 
                                        +inf).
                                        
  --diversity-exponent arg (=-1)        Set the exponent of the generalized 
                                        mean (or sum, if --diversity-normalize 
                                        is set to 0) aggregating the penalties 
                                        between a candidate and the set of all 
                                        candidates better than itself (taking 
                                        into account diversity). If the value 
                                        tends towards 0 it tends to the 
                                        geometric mean, towards +inf it tends 
                                        to the max function. If negative or 
                                        null is it the max function.
                                        
  --diversity-normalize arg (=1)        If set to 1 then the aggregating 
                                        function is a generalized mean. 
                                        Otherwize it is a generalized sum 
                                        (generalize mean * number of elements).
                                        If --diversity-exponent is set to 
                                        negatively then this doesn't have any 
                                        impact as the aggregating function is 
                                        the max anyway.
                                        
  --diversity-dst arg (=p_norm)         Set the distance between behavioral 
                                        scores, then used to determin the 
                                        diversity penalty.3 distances are 
                                        available: p_norm, tanimoto and 
                                        angular.
                                        
  --diversity-p-norm arg (=2)           Set the parameter of the p_norm 
                                        distance. A value of 1.0correspond to 
                                        the Manhatan distance. A value of 2.0 
                                        corresponds to the Euclidean distance. 
                                        A value of 0.0 or less correspond to 
                                        the max component-wise. Any other value
                                        corresponds to the general case.
                                        
  --diversity-dst2dp arg (=auto)        Set the type of function to convert 
                                        distance into penalty. 4 options are 
                                        available: auto, inverse, complement 
                                        and power. When auto is selected the 
                                        function is selected depending on the 
                                        distance, if the distance is p_norm, 
                                        then inverse is selected, otherwise 
                                        complement is selected.
                                        
  -R [ --discretize-threshold ] arg     If the domain is continuous, discretize
                                        the target feature. A unique used of 
                                        that option produces 2 classes, x < 
                                        thresold and x >= threshold. The option
                                        can be used several times (n-1) to 
                                        produce n classes and the thresholds 
                                        are automatically sorted.
                                        
  -K [ --ip_kld_weight ] arg (=1)       Interesting patterns (ip). Weight of 
                                        the KLD.
                                        
  -J [ --ip_skewness_weight ] arg (=1)  Interesting patterns (ip). Weight of 
                                        skewness.
                                        
  -U [ --ip_stdU_weight ] arg (=1)      Interesting patterns (ip). Weight of 
                                        stdU.
                                        
  -X [ --ip_skew_U_weight ] arg (=1)    Interesting patterns (ip). Weight of 
                                        skew_U.
                                        
  -Q [ --alpha ] arg (=0)               If problems pre, prerec, recall, f_one 
                                        or bep are specified, this option is 
                                        used to set the 'hardness' of the 
                                        constraint, with larger values 
                                        corresponding to a harder constraint 
                                        (i.e. punishing the score more strongly
                                        if the contraint is not met.)  For the 
                                        'pre' problem, if alpha is negative, 
                                        then its absolute value is used for the
                                        hardness, and the negative predictive 
                                        value is maximized (instead of the 
                                        precision).
                                        
  --pre-worst-norm arg (=0)             Normalize the precision w.r.t. its 
                                        worst decile [EXPERIMENTAL].
                                        
  --it-abs-err arg (=0)                 Use absolute error instead of squared 
                                        error [EXPERIMENTAL, the occam's razor 
                                        hasn't been calibrated for that fitness
                                        function yet].
                                        
  --gen-best-tree arg (=0)              Attempts to generate the best candidate
                                        (possibly huge and overfit) head-on. 
                                        Only works combined with -Hpre for now.
                                        
  --enable-fs arg (=0)                  Enable integrated feature selection.  
                                        Feature selection is performed 
                                        immediately before knob building 
                                        (representation building), when 
                                        creating a new deme.  Limiting the 
                                        number of features can sharply improve 
                                        the run-time and memory usage of large 
                                        problems.
                                        
  --fs-target-size arg (=20)            Feature count.  This option specifies 
                                        the number of features to be selected 
                                        out of the dataset.  A value of 0 
                                        disables feature selection.
                                        
  --fs-exp-distrib arg (=0)             Use a smoth exponential distribution, 
                                        instead of hard cuttoff, when selecting
                                        the highest-scoring features.  Without 
                                        this option, the highest-scoring 
                                        count=N features will be selected. That
                                        is, the distribution will be a hard 
                                        cutoff or cliff: after ranking all 
                                        features by score, the k'th 
                                        highest-ranked feature will be selected
                                        with probability 1.0 if k<N  and with 
                                        probability 0.0 if k>N.  With this 
                                        option enabled, a total of count=N 
                                        features will still be selected, and 
                                        most of these will be the highest 
                                        scoring ones, but a few lower-ranked 
                                        features will also be included.  
                                        Specifically, the probability of 
                                        choosing the k'th ranked feature will 
                                        be exp(-tk) with t choosen so that, on 
                                        average, N features are selected.  The 
                                        initial random seed affects the 
                                        generated list. Currently, this option 
                                        only applies to the -asimple algo, and 
                                        is ignored by the others (this needs to
                                        be fixed.)
                                        
  --fs-focus arg (=incorrect)           Focus of feature selection (which data 
                                        points feature will focus on):
                                        
                                        all, all data points are considered
                                        
                                        active, only active data points are 
                                        considered
                                        
                                        incorrect, only incorrect answers are 
                                        considered
                                        
                                        ai, only active data points that are 
                                        incorrectly answered are considered.
                                        
  --fs-seed arg (=add)                  Seed type (how to use the features of 
                                        the exemplar to seed feature 
                                        selection):
                                        
                                        none, empty initial feature set.  The 
                                        features used in the exemplar are 
                                        removed from the dataset before feature
                                        selection occurs. This prevents newly 
                                        selected features from being those 
                                        already in the exemplar.
                                        
                                        add, empty initial feature set. The 
                                        number of features currently in the 
                                        exemplar are addedto the number of 
                                        features to be selected. This 
                                        guarentees that at least fs_target_size
                                        features are not from the exemplar 
                                        itself.
                                        
                                        init, the features of the exemplar are 
                                        used as an initial guess for feature 
                                        selection. The number of features 
                                        currently in the exemplar are addedto 
                                        the number of features to be selected.
                                        
                                        xmplr, the "exemplar feature" is used 
                                        as initial guess. The exemplar feature 
                                        is the output of the exemplar. The 
                                        number of features to select is 
                                        incremented by 1 (to account for the 
                                        exemplar feature). That is, the number 
                                        of feature to select is fs_target_size 
                                        + 1
                                        
  --fs-prune-exemplar arg (=0)          Remove from the exemplar the literals 
                                        of non-selected features.
                                        
  --fs-subsampling-pbty arg (=0)        Probability of discarding an 
                                        observation before carrying feature 
                                        selection. 0 means no observation is 
                                        discard, 1 means all are discard. This 
                                        is to force to introduce some 
                                        randomness in feature selection, as not
                                        all feature selection algorithms have 
                                        some.
                                        
  --fs-demes arg (=1)                   Number of feature sets to select out of
                                        feature selection and the number of 
                                        demes to accordingly spawn.
                                        
  --fs-algo arg (=simple)               Feature selection algorithm. Supported 
                                        algorithms are:
                                        simple for a simple, fast 
                                        max-mutual-information algo.
                                        inc for incremental max-relevency, 
                                        min-redundancy.
                                        smd for stochastic maximal dependency,
                                        hc for moses-hillclimbing.
                                        
  --fs-scorer arg (=mi)                 Feature selection fitness function 
                                        (scorer).
                                         Supported scorers are:
                                        mi, for mutual information
                                        pre, for precision (see moses -h for 
                                        more info)
                                        
  --fs-threshold arg (=0)               Improvement threshold. Floating point 
                                        number. Specifies the threshold above 
                                        which the mutual information of a 
                                        feature is considered to be 
                                        significantly correlated to the target.
                                          A value of zero means that all 
                                        features will be selected. 
                                        For the -ainc algo only, the -C flag 
                                        over-rides this setting.
                                        
  --fs-diversity-pressure arg (=0)      Multiplicative coefficient of the 
                                        diversity penalty (itself being in 
                                        [0,1]).
                                        
  --fs-diversity-cap arg (=100)         Place a cap on the maximum number of 
                                        feature set to consider. If zero, no 
                                        cap is used (Warning: could be very 
                                        slow). Use this to speed up diversity 
                                        computation on feature sets.
                                        
  --fs-diversity-interaction arg (=-1)  Maximum number of interactions to be 
                                        considered when computing the mutual 
                                        information between feature sets. This 
                                        is used in case the number of selected 
                                        features tends to be high compared to 
                                        the number of datapoints to decrease 
                                        inacuracy of the mutual information.
                                        
  --fs-inc-redundant-intensity arg (=-1)
                                        Incremental Selection parameter. 
                                        Floating-point value must lie between 
                                        0.0 and 1.0.  A value of 0.0 or less 
                                        means that no redundant features will 
                                        discarded, while 1.0 will cause a 
                                        maximal number will be discarded.
                                        
  --fs-inc-target-size-epsilon arg (=9.9999999999999995e-07)
                                        Incremental Selection parameter. 
                                        Tolerance applied when selecting for a 
                                        fixed number of features (option -C).
                                        
  --fs-inc-interaction-terms arg (=1)   Incremental Selection parameter. 
                                        Maximum number of interaction terms 
                                        considered during incremental feature 
                                        selection. Higher values make the 
                                        feature selection more accurate but is 
                                        combinatorially more computationally 
                                        expensive.
                                        
  --fs-pre-penalty arg (=1)             Activation penalty (see moses --help or
                                        man moses for more info).
                                        
  --fs-pre-min-activation arg (=0.5)    Minimum activation (see moses --help or
                                        man moses for more info).
                                        
  --fs-pre-max-activation arg (=1)      Maximum activation (see moses --help or
                                        man moses for more info).
                                        
  --fs-pre-positive arg (=1)            If 1, then precision, otherwise 
                                        negative predictive value (see moses 
                                        --help or man moses for more info).
                                        
  --fs-hc-max-score arg (=1)            Hillclimbing parameter.  The max score 
                                        to reach, once reached feature 
                                        selection halts.
                                        
  --fs-hc-max-evals arg (=10000)        Hillclimbing parameter.  Maximum number
                                        of fitness function evaluations.
                                        
  --fs-hc-fraction-of-remaining arg (=0.5)
                                        Hillclimbing parameter.  Determine the 
                                        fraction of the remaining number of 
                                        eval to use for the current iteration.
                                        
  --fs-hc-crossover arg (=0)            Hillclimber crossover (see 
                                        --hc-crossover option)
                                        
  --fs-hc-crossover-pop-size arg (=0)   Hillclimber crossover pop size (see 
                                        --hc-crossover option)
                                        
  --fs-hc-widen-search arg (=1)         Hillclimber widen_search (see 
                                        --widen-search)
                                        
  --fs-mi-penalty arg (=100)            Mutual-information scorer parameter.  
                                        Intensity of the confidence penalty, in
                                        the range (-Inf, +Inf).  100 means no 
                                        confidence penalty. This parameter 
                                        influences how much importance is 
                                        attributed to the confidence of the 
                                        quality measure. The fewer samples in 
                                        the data set, the more features the 
                                        less confidence in the feature set 
                                        quality measure.
                                        
  --fs-smd-top-size arg (=10)           Stochastic max dependency parameter. 
                                        Number of feature subset candidates to 
                                        consider building the next superset.
                                        

